"""[TASK] Виртуальное окружение."""

# 1. Что делает команда python -m venv venv?
# создаёт новое локальное виртуальное окружение Python в папке venv — отдельную копию интерпретатора и папок для установки зависимостей, чтобы пакеты не мешали глобальной системе
# 1.1 Что делает каждая команда в списке ниже?
# ![image.png](attachment:image.png)
# 1) Показывает список установленных в текущем окружении пакетов Python и их версии. Например: numpy 1.26.4 ; pandas 2.2.2
# 2) pip freeze выводит список пакетов в формате package==version.
# > requirements.txt записывает этот список в файл.
# Получаем «снимок окружения», который можно воспроизвести у другого разработчика
# 3) Устанавливает все пакеты, перечисленные в requirements.txt.
# Используется для восстановления окружения у коллег или на сервере
# 2. Что делает каждая команда в списке ниже?
#
# ![image-2.png](attachment:image-2.png)
# 1) Показывает список всех conda-окружений и путь, где они хранятся
# 2) Создаёт новое окружение с именем env_name и версией Python 3.5
# 3) Обновляет окружение env_name по спецификации в файле file.yml (часто это environment.yml).
# Туда могут входить пакеты, каналы, переменные окружения и т.д
# 4) Активирует окружение env_name (делает его текущим)
# 5) Деактивирует текущее окружение (возвращает в базовое base)
# 6) Удаляет все временные файлы conda:
# кэш пакетов,
# архивы скачанных пакетов,
# индексы каналов
# 3. вставьте скрин вашего терминала, где вы активировали сначала venv, потом conda, назовите окружение "SENATOROV"
#
# ![Снимок экрана 2025-10-27 210046](../docs/img/screenshot-2025-10-27-210046.png)
# ![Снимок экрана 2025-10-27 215003](../docs/img/screenshot-2025-10-27-215003.png)
# 1. Как установить необходимые пакеты внутрь виртуального окружения для conda/venv?
# Активировать окружение:
# Для venv: source venv/bin/activate или venv\Scripts\activate
# Для conda: conda activate SENATOROV
# (Активация нужна, чтобы pip/conda устанавливали в текущее окружение).
# Установить пакеты:
# Для venv (pip): pip install package_name
# Для conda: conda install package_name (или conda install -c channel package_name)
# Проверить установленные зависимости: pip list или conda list
# 1. Что делают эти команды?
# pip freeze > requirements.txt
# Записывает список установленных pip-пакетов (с версиями) в файл requirements.txt. Это даёт воспроизводимость при установке в других окружениях
# conda env export > environment.yml
# Экспортирует полное описание conda-окружения (включая версии пакетов, каналы, иногда платформенные зависимости) в environment.yml. Это позволяет воссоздать окружение командой conda env create -f environment.yml
#
# 5.1 вставьте скрин, где будет видна папка VENV в вашем репозитории а также файлы зависимостей requirements.txt и environment.yml, файлы должны содержать зависимости
# ![Снимок экрана 2025-10-27 214658](../docs/img/screenshot-2025-10-27-214658.png)
# 1. Что делают эти команды?
# pip install -r requirements.txt
# Устанавливает все пакеты из requirements.txt в текущее активное окружение через pip
# conda env create -f environment.yml.
# Создаёт новое conda-окружение и устанавливает в него пакеты, перечисленные в environment.yml (обычно с именем, указанным в yml)
# 1. Что делают эти команды?
# pip list
# Показывает список установленных pip-пакетов в текущем интерпретаторе/окружении
# pip show
# Показывает информацию о конкретном пакете (версия, путь установки, зависимости и т.п.)
# conda list
# Показывает список пакетов, установленных в текущем conda-окружении (включая пакеты, управляемые conda)
# 1. Где по умолчанию больше пакетов venv/pip или conda? и почему дата сайнинисты используют conda?
# По умолчанию conda-дистрибутив (Anaconda) имеет больше предустановленных пакетов, чем чистый venv+pip.
# в conda уже есть набор пакетов (например ~15 и больше). Conda — это «дистрибутив: совокупность пакетов»
# 1. вставьте скрин где будет видно, Выбор интерпретатора Python (conda) в VS Code/cursor
#
# ![Снимок экрана 2025-10-27 210817](../docs/img/screenshot-2025-10-27-210817.png)
# 1.  добавьте в .gitignore папку SENATOROV
# 2.  Зачем нужно виртуально окружение?
# 1) Изоляция зависимостей: каждая проектная среда имеет свои версии библиотек, чтобы избежать конфликтов версий между проектами
# 2) Воспроизводимость: сэкономленные файлы зависимостей (requirements.txt / environment.yml) позволяют другим воспроизвести окружение
# 3) Безопасность и чистота системы: не лезем в глобальные пакеты системы и не засоряем системный Python
# 6.  С этого момента надо работать в виртуальном окружении conda, ты научился(-ась) выгружать зависимости и работать с окружением?
# Да
# 1.  Удалите папку VENV, она больше не нужна, мы же не разрабы, нам нужна только conda
