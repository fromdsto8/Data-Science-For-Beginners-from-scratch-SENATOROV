"""CPython and Python."""

# 1.  Что такое CPython и чем он отличается от Python?
#     CPython - это одна из реализаций языка программирования Python,
#     написана на языке С, является интерпретатором
# 3.  Сколько существует реализаций Python, и какая из них самая популярная?
#     6, CPython
# 4.  На каком языке написан CPython?
#     на языке С
#
# 5.  Кто создал CPython?
#     Guido van Rossum
# 6.  Почему Python считается быстрым, несмотря на то, что это
#     интерпретируемый язык?
#     Потому что в реализации CPython написана на языке
#     программирования С и вызывает инструкции из С
# 7.  Напишите путь к Интерпретатору CPython на вашем компьютере
#     /opt/miniconda3/bin/python
#
# 8.  Что содержится в папке include в CPython?
#     файлы С (.h)
# 9.  Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
#     https://github.com/python/cpython
# 10. Как работает интерпретатор CPython при выполнении кода?
#     CPython сначала читает текст программы и превращает его в
#     абстрактное синтаксическое дерево.
#     Которое компилируется в байт-код — последовательность
#     инструкций для виртуальной машины.
#     Виртуальная машина пошагово читает каждую инструкцию и
#     выполняет её через написанные на C функции.
#     Когда весь байт-код выполнен, программа завершается.
#
# 11. Какая команда используется для запуска файла с помощью CPython?
#     Запуск файла через CPython — это обычный запуск Python-программы;
#     В Windows файл с расширением .exe - исполняемая программа интерпретатора
#     В терминале можно ввести путь до интерпретатора, пробел и путь до файла
# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
#     Да, потому что интерпретатору неважно какое расширение файлов.
# 13. Как указать путь к интерпретатору и файлу для выполнения кода?
#     Чтобы указать путь к интерпретатору нажимаем на файл .exe правой
#     кнопкой мыши, выбираем Properties в открывшемся окне рядом с
#     Location будет указан путь, также делаем при выборе пути для
#     нужного файла
#
# 14. Чем PyPy отличается от CPython?
#     PyPy работает в 10 раз быстрее чем CPython, но он еще не совместим
#     со всеми проектами на питоне
# 15. Почему PyPy не может использоваться для всех проектов на Python?
#     Этот интерпретатор реализован в RPython который представляет собой
#     ограниченное статически типизированное подмножество языка
#     программирования python
# 16. Где можно скачать PyPy?
#     На сайте https://pypy.org
#
# 17. Как установить PyPy после скачивания?
#     Распаковать архив, перейди в папку PyPy, запустить интерпретатор
# 18. Как запустить файл с помощью PyPy?
#     Скопировать путь до интерпретатора PyPy (можно выбрать любой файл .exe);
#     В терминале вставить путь до интерпретатора, пробел и путь до файла
# 19. Почему PyPy выполняет код быстрее, чем CPython?
#     PyPy использует JIT-компилятор, который компилирует часто выполняемый
#     код в машинный, а CPython работает как чистый интерпретатор байт-кода.
#
# ПРАКТИЧЕСКИЕ ЗАДАНИЯ
#
# 1) Поиск и установка CPython
#     py --version
#     Python 3.13.7
#
# 2) Исследование структуры CPython
#     Users\ASUS\AppData\Local\Programs\Python\Python313\
#     264 файла на С
#
# 3) Запуск файла с помощью CPython
#    C:\Users\ASUS>C:\Users\ASUS\AppData\Local\Programs\Python\Python313\python.exe
#    C:\Users\ASUS\Desktop\example.txt Hello from CPython!
#
#    C:\Users\ASUS\AppData\Local\Programs\Python\Python313\python.exe
#    C:\Users\ASUS\Desktop\example.py Hello from CPython!
#
# 4) Установка и использование PyPy
#     Вывод одинаковый, что с txt, что c py
#
# 5) Сравнение производительности CPython и PyPy
#     C:\Users\ASUS\AppData\Local\Programs\Python\Python313\python.exe
#     C:\Users\ASUS\Desktop\performance_test.py
# Result: 49999995000000
# Execution time: 1.1929292678833008 seconds
#     C:\Users\ASUS\AppData\Local\pypy3.11-v7.3.20-win64\pypy3.11.exe
#     C:\Users\ASUS\Desktop\performance_test.py
# Result: 49999995000000
# Execution time: 0.012991905212402344 seconds
#
# Результаты: запуск кода через PyPy практически в 92 раз быстрее,
# чем через CPython
