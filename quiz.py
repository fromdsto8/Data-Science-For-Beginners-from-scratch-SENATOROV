"""Ответы на вопросы по основам Git, GitHub, VS Code и Python."""

# 1) Как понять, что домашка пришла?
# Ответ: В телеграмм канале в чате "HomeWork" будет сообщение с моим никнеймом и сообщение "Прими пул"
# 2) Как принять домашку?
# Ответ: Открываем Github desktop в правом верхнем углу нажимаем "Fetch origin". Открываем вкладку "History" заходим в самый верхний коммит(так же просматриваем остальные коммит на наличие изменений).Нажимаем "Open in Visual Studio Code"
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# Ответ: Кнопка "History" в GitHub Desktop позволяет просматривать историю коммитов репозитория, отслеживать изменения в файлах и анализировать прогресс проекта. При нажатии правой кнопкой мыши на коммит становятся доступны функции: Checkout to this commit (переключиться на этот коммит), Revert this commit (отменить изменения), Reset to this commit (сбросить до этого коммит), Create Tag (создать тег) и Copy SHA (копировать хеш коммит)
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Ответ: Открыть коммит через «Open on GitHub», скопировать URL сверху и отправить в Telegram‑чат преподавателя с пометкой "коми отдал"
# 4) Что такое файл лога?
# Ответ: Файл лога (лог) — текстовый файл, где в конце урока фиксируют дату и краткие тезисы о том, что было изучено
# 4.1) Когда нужно его пушить?
# Ответ: Пушить лог нужно вместе с остальными изменениями после завершения урока, чтобы преподаватель видел мои записи
# 5) Что такое интерпретатор?
# Ответ: Интерпретатор — программа, которая читает и запускает наш код (например, Python/Anaconda)
# 6) Где можно выбрать интерпретатор?
# Ответ: Вверху интерфейса VS Code (или в правом нижнем углу) выбрать нужный интерпретатор/Anaconda "Select Kernel" перед запуском ячеек
# 7) Что такое модуль?
# Ответ: Модуль — файл с кодом (например .py или ячейка/файл урока), содержащий функции/классы
# 8) Как создать и отправить коммит?
# Ответ: Создаём/изменяем файл, пишем сообщение коммит в кошечке, нажимаем Commit to main, затем Push Origin
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Ответ: В history нажать правой кнопкой Open on GitHub и проверить, что коммит виден на странице репозитория
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# Ответ: При попытке коммит появляется окно с результатами проверок (линтеров) — в нём видно, что проверки failed; для локальной проверки используется команда линтера. Открываем окно "Terminal", "New Terminal". В терминал пишем pre-commit run --all-files.
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Ответ:
# ms-python.pylint - Самый строгий и всеобъемлющий линтер. Проверяет стиль кода, потенциальные ошибки, сложность функций, соответствие PEP 8. Может быть довольно "придирчивым", но помогает писать качественный код.
# ms-python.flake8 - Быстрый и популярный линтер, объединяющий PyFlakes, pycodestyle и McCabe. Фокусируется на синтаксических ошибках, стилевых нарушениях PEP 8 и цикломатической сложности. Хороший баланс между строгостью и производительностью.
# ms-python.mypy-type-checker и matangover.mypy - Статические анализаторы типов. Проверяют корректность типов данных в коде с type hints. Помогают находить ошибки типизации до выполнения программы.
# ms-pyright.pyright - Быстрый статический анализатор типов от Microsoft. Альтернатива MyPy с лучшей производительностью и интеграцией в VS Code. Также проверяет типы и находит потенциальные ошибки.
# 11) Как узнать какой именно линтер не прошёл проверку?
# Ответ: Окошко ошибок показывает имя секции/линтера слева (например, PD Style или Pylint) и статус failed; там же указано, в каком файле и ячейке ошибка
# 12) Линтер Pylint видит markdown?
# Ответ: Pylint в основном анализирует Python‑код; markdown (MD) обычно не анализируется Pylint‑ом — линтеры кода не видят маркдаун в ячейках
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Ответ: Да — линтер может игнорировать маркеры ячеек поэтому нумерация в отчёте линтера может сдвигаться относительно VS Code
# 14) Где посмотреть номер ячейки в vscode?
# Ответ: Номера ячеек видны в правом нижнем углу интерфейса VS Code и возле каждой ячейки в редакторе
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Ответ: Файл .ipynb хранится в формате JSON, поэтому при отображении GitHub показывает его как JSON/JS‑объект — это нормальный формат файла
# 16) Где посмотреть в какой ячейке ошибка?
# Ответ: В окне ошибок/линтер‑отчёта указано имя файла и номер ячейки (Cell X); также можно найти место ошибки через Ctrl+F по коду
# 17) Как запустить терминал?
# Ответ: Нажать на вкладку "Terminal", далее "New Terminal", после чего вставить команду проверки или другие команды
# 18) Что такое линтер?
# Ответ: Линтер — программа, которая автоматически проверяет код на ошибки стиля, синтаксиса и потенциальные баги до коммита
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# Ответ: На сайте pylint https://pylint.readthedocs.io/en/stable/ в левом верхнем углу поиск по коду ошибки или посмотреть решения в чате Help me
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# Ответ: После исправления ошибок в Python‑коде (Pylint/PEP‑style) секция pydocstyle обычно убирается автоматически
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Ответ: Описание модуля — многострочный docstring в начале файла, кратко объясняющий назначение модуля. Оно должно отражать, что в модуле находится
# 21.1) С какой  git команды начинается утро программиста?
# Ответ: сначала — git pull (или принять обновления в кошке), чтобы получить изменения из удалённого репозитория
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# Ответ: Навести на репозиторий в списке, кликнуть правой кнопкой мыши и выбрать "Open in VS Code"
# 23) Что такое stash?
# Общее объяснение концепции.
# Ответ: Stash — временное сохранение локальных изменений (буфер), чтобы можно было принять изменения из удалённого репозитория и потом восстановить свои локальные правки
# 23.1) Как сохранить стэш?
# git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ: Через git: команда git stash save "описание" или просто git stash для быстрого сохранения локальных изменений
#
# Кнопка в vs code:
# Ответ: Если мы хотим сохранить "Что пришло из интернета" кнопка "Accept Current Change" (чаще всего)
# Кнопка "Accept Incoming Changes" - принимает изменения те что на компьютере (НЕ ЖЕЛАТЕЛЬНО т.к изменения с гитхаба не примутся)
# Либо принять оба изменения кнопкой "Accept both changes"
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# Ответ: Нажать кнопку "Restore Stash" в кошке
#
# git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# Ответ: Через git: команда git stash apply применит последний стэш, git stash apply stash@{N} — применит конкретный элемент
# В VS Code: в меню Stash выбрать нужный стэш и выбрать Restore/Apply (восстановить)
#
# 23.3) Различие между стэшем и коммитом.
# Когда лучше сохранить изменения в стэше, а когда коммитить.
# Ответ: Стэш — временное локальное сохранение изменений без фиксации в истории; удобно, если нужно быстро принять обновления (pull) или переключиться на другую ветку. s
# Коммит — постоянная фиксация изменений в локальной истории с сообщением; используется когда работа завершена и готова быть отправлена в удалённый репозиторий
# Когда использовать:
# Сохраняем в stash, если изменения недоработаны и нужно временно освободить рабочую копию.
# Делаем commit, когда изменения завершены и имеют смысл в истории проекта.
# 23.4) Как просмотреть список сохраненных стэшей?
# git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ: Git: git stash list покажет все сохранённые стэши
#
# 23.5) Как удалить стэш?
# Команды для удаления отдельных стэшей или всех сразу.
# git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ:
# Удалить конкретный: git stash drop stash@{N}.
# Удалить последний: git stash drop.
# Удалить все: git stash clear
#
# 23.6) Практические примеры использования стэша.
# Краткие сценарии, где стэш помогает.
# Ответ:
# Нужно быстро сделать git pull, но есть незавершённые правки — сохраняем в stash и выполняем pull
# Переключаемся на другую ветку для срочного бага — stash текущие изменения, переключились, вернулись и восстановили
# Экспериментальные изменения, которые не хотим коммитить в историю — временно положить в stash
#
# 24) Где посмотреть что есть конфликт в файлах?
# Ответ: Индикация в кошечке/VS Code: появится значок conflicted/волнистая иконка; в history/при попытке принять изменения появится сообщение о конфликте и файлы с конфликтами
# 24.1) Когда он появляется?
# Ответ: Когда одновременно изменили один и тот же участок файла на локальной машине и в удалённом репозитории (при попытке принять изменения / pull/merge)
# 25) Как решить конфликт в файлах?
# Ответ: Открыть файл с конфликтом в редакторе.
# Выбрать решение: Accept current changes (принять то, что пришло с GitHub), Accept incoming changes (принять локальные) или Accept both (оба), либо вручную отредактировать и сохранить
# После разрешения нажать Resolve/Complete merge и выполнить коммит и push.
# 26) Напишите правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# Ответ: зелёное — то, что пришло с GitHub (incoming), синее — локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Ответ: Да — спрятать изменения в stash, затем принять (pull) изменения из удалённого репозитория
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Ответ: Может возникнуть конфликт между восстановленными локальными изменениями и теми, что пришли при pull; придётся разрешать конфликты вручную
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# Ответ: 3 способа:
# Accept current changes — принять изменения из GitHub (зелёные).
# Accept incoming changes — принять локальные изменения (синие).
# Accept both / вручную — принять оба или вручную отредактировать конфликт и затем Resolve and merge
# 29) Что делает кнопка complete merge?
# Ответ: Фиксирует (завершает) слияние после разрешения конфликтов — объединяет изменения и убирает статус конфликта
# 30) В какой чат нужно писать если остались вопросы?
# Ответ: В телеграмм чат "Help me"
# 31) Что такое FORK? Зачем его делают?
# Ответ: Fork — копия чужого репозитория в вашем аккаунте GitHub; используется чтобы экспериментировать или вносить изменения в чужой проект без прав доступа к оригиналу
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Ответ: Клонировать: в интерфейсе выбрать "Clone repository" или выполнить git clone и затем открыть в VS Code
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Ответ: примерно с вероятностью 90% — ошибки уже были решены в чате другими студентами или преподавателем
# 34) Как создать файл в vs code?
# Ответ: Нажать кнопку с листочком/плюсом (New File) в проводнике VS Code, ввести имя (например Lesson_One.ipynb) и сохранить
# 35) Файл лога нужно заполнять в конце каждого урока?
# Ответ: Да — в конце каждого урока в файле лога указывать дату и краткое содержание/что запомнили; это обязательный элемент логирования
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# Ответ: Команда: jupyter nbconvert --to script Lesson_One.ipynb — создаст файл Lesson_One.py
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Ответ: Пакетный менеджер — инструмент для установки, обновления и управления библиотеками/пакетами в среде разработки (Python-пакетами и их зависимостями).
# pip — стандартный пакетный менеджер для Python‑пакетов из PyPI.
# conda — менеджер пакетов и сред, удобно управляет бинарными зависимостями (особенно для научных/data‑science пакетов)
# Для data‑science: часто используют conda из‑за простоты установки пакетов с бинарными зависимостями (numpy, pandas, scipy, scikit‑learn, т. д.), но pip остаётся полезным и необходимым для многих пакетов
# 3) Почему расширение py лучше чем ipynb?
# Ответ: .py — скрипт/модуль: легко версионируется через git, удобен для тестирования, автоматизации, CI/CD и выполнения как модуль/пакет.
# .ipynb — удобен для интерактивных экспериментов и демонстраций, но: хранит JSON, труднее читать diff в git и иногда вызывает проблемы с линтерами/проверками стиля при автоматической сборке
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# Ответ: PEP8 — стиль‑гайд по оформлению кода Python (рекомендации по отступам, именованию, пробелам, длине строк и т.д.)
# 4.1) линтеры проверяют на соблюдение pep8?
# Ответ: Да. Линтеры (например flake8, pylint, pycodestyle) проверяют код на соответствие рекомендациям стиля, включая правила из PEP8
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Ответ: PEP8 рекомендует для имен переменных и функций использовать snake_case (маленькие буквы с подчёркиваниями)
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Ответ: Переменная может иметь имя из одной буквы, включая _ как имя — это допустимо синтаксически в Python, но их использование не рекомендуется для большинства случаев, так как они снижают читаемость кода
# 4.4) Зачем и где мы используем андерскор _
# Ответ: Временная/неиспользуемая переменная (например for _ in range(10):), чтобы показать, что значение не важно.
# Последний результат в интерактивном интерпретаторе (в REPL _ хранит результат предыдущего выражения).
# Как "защищённое" имя при одиночном ведущем подчёркивании (_var) — сигнал другим разработчикам, что переменная внутреннего/непубличного использования.
# Двойное подчёркивание (__name) — механизм манглинга имён в классах (для частных атрибутов)
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Ответ: PEP8 допускает односимвольные имена в ограниченных случаях (например счётчики циклов — i, j, k; короткие временные переменные), но рекомендует давать осмысленные имена там, где это повышает читаемость
# Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# Ответ: Открыть меню в VS Code вкладка File - Auto Save - и включить Auto Save
# 2. Как настроить перенос строки?
# Ответ: В Settings найти параметр Word Wrap Column (или "Editor: Word Wrap Column") и выставить нужную длину
# 3. Сколько символов по pep8 разрешено на строке?
# Ответ: 79 символов
# 4. Какие способы переноса строк показаны в видео:
# Ответ:
# Тройные кавычки (''' / """)
# Круглые скобки для продолжения строки
# Сложение строк (конкатенация)
# Создание списка строк и объединение с помощью join
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# Ответ: Панель Problems доступна в боковой панели VSCode. Она показывает список проблем с файлами и ссылками на сайт с описанием ошибки
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Ответ: Клиент Git находится в левом сайдбаре (иконка с веткой/кружочком), а также есть панель Git внизу (gitlens/git icon и gitline). Чтобы отправить коммит: ввести сообщение коммита в соответствующее поле и нажать галочку (Commit) и затем Commit and Push или отдельно нажать Push.
# Чтобы принять домашку (pull): используется кнопка Pull или командная кнопка в интерфейсе (Pull/Fetch)
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# Ответ: Ответ: Git — система контроля версий; локально хранит историю изменений, позволяет просматривать историю файлов и возвращаться к любому коммиту. В Git хранится история изменений, и в VSCode можно смотреть историю через вкладку History и видеть изменения по файлам
# 8. Как вставить картинку в маркдаун?
# Ответ: Вставить картинку можно прямо в markdown ячейку через Ctrl+V (вставка скриншота) и затем редактирование размера через HTML/теги при желании
# 9. Где посмотреть длину строки в vs code?
# Ответ: Внизу справа в строке состояния VSCode показывается длина текущей строки (количество символов в строке)
# 10. Как поменять тип ячейки с питона на маркдаун?
# Ответ: Вверху ячейки есть выпадающее меню типа ячейки (по умолчанию Python); можно выбрать Markdown — это показано при создании/изменении ячейки
# 11. Как запустить сразу все ячейки в юпитере?
# Ответ: Есть кнопка Run All (запустить все ячейки одновременно) в интерфейсе
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# Ответ: Можно менять размер картинки через теги/синтаксис (например HTML или markdown с параметрами). Нужно знать теги (HTML) или синтаксис markdown
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# Ответ: Shift + Enter — запускает текущую ячейку и перемещает фокус на следующую ячейку
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# Ответ: В интерфейсе есть кнопка Line Numbers или клавиша L
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# Ответ: Go To — команда/кнопка, которая перебрасывает пользователя к проблемной (ошибочной) ячейке или месту в коде
# 16. Как очистить вывод ячеек которые уже запущены?
# Ответ: Можно очистить вывод ячеек кнопкой Clear Output
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# Ответ: Можно открыть разделённый (split) редактор: кнопка «Split Editor» (иконка с двумя листами) создаёт второй редактор справа/слева
# 18. Каким сочетанием убирается левый сайдбар?
# Ответ: Сочетание Ctrl + B скрывает/показывает левый сайдбар
# 19. Кнопка два листочка это наши локальные файлы?
# Ответ: Да — иконка с двумя листочками открывает обычную файловую панель (Explorer), где отображаются локальные файлы проекта
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# Ответ: Ошибка связанная с неопределённой переменной Dict (F821)
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# Ответ: Да
# 22. Что такое валидация?
# Ответ: Валидация — проверка ноутбука/кода на ошибки при запуске (Run All). Смотрим где "отвалился" код, затем переходим к ошибкам с помощью Go To
# 23. Что такое трассировка ошибки?
# Ответ: Трассировка (traceback) — вывод стека ошибок при выполнении кода, который показывает, где именно произошёл сбой
# 24. Что значит отвалился интерпретатор?
# Ответ: Это означает, что среда выполнения (интерпретатор Python) перестала работать корректно или процесс упал. Например "отвалилась" ячейка в юпитере
